#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");

#########################################################################

R5.8 Pseudocode.
The standard letter-to-number mapping is as follows:
2-ABC, 3-DEF, 4-GHI, 5-JKL, 6-MNO, 7-PQRS, 8-TUV, 9-WXYZ
Pseudocode:
FUNCTION TranslatePhoneNumber(String numberWithLetters) ->String:

    //Create mapping as Map:
    "A" -> "2", "B" -> "2", "C" -> "2",
    "D" -> "3", "E" -> "3", "F" -> "3",
    "G" -> "4", "H" -> "4", "I" -> "4",
    "J" -> "5", "K" -> "5", "L" -> "5",
    "M" -> "6", "N" -> "6", "O" -> "6",
    "P" -> "7", "Q" -> "7", "R" -> "7", "S" -> "7",
    "T" -> "8", "U" -> "8", "V" -> "8",
    "W" -> "9", "X" -> "9", "Y" -> "9", "Z" -> "9"

    //Initialize the translated number string
    DEFINE translatedNumber AS EMPTY STRING

    //Iterate over each character in the input string
    FOR EACH char IN numberWithLetters:
        //If the character is a letter, replace it with corresponding number
        IF char IS LETTER:
            translatedNumber += mapping[char]
        ELSE:
            translatedNumber += char
    //Return the translated phone number
    RETURN translatedNumber

END FUNCTION

#########################################################################

R5.10 Variable scope.
The variable i and b defined inside the main() method: Local Scope(Method Scope), variable i and b are only accessible within 'main()'
The variable n defined inside the f() method: Local Scope, variable n is only accessible within f();
The variable i transferred as parameters to f() method: Local Scope(Parameters), variable i is a variable asserted at the time of f() method
definition as the value passed to the method when it is called. The scope of parameter variables is limited to inside the method f().
The variable b defined inside the g() method: Local Scope, variable b is only accessible within g();
The variable i transferred as parameters to g() method: Local Scope(Parameters), the scope of variable is limited to inside the method g().

The program prints: 16

#########################################################################

R5.14 Pass by value versus pass by reference
When pass primitive data types as parameters to a method, they are passed by value. This means that the method receives a copy of the actual
value. Changing the copy inside the method does not change the original value outside the method. That is why the falseSwap method doesn't swap
the contents of x and y.
Java is strictly pass-by-value. For primitives, the actual value is passed, and for objects, the reference(memory address) value is passed.
This means you can modify the object's internals via the passed reference, but you can't change the original reference to point to a different object.

#########################################################################

R6.3 Considering loops
a. total = 25
b. total = 13
c. total = 12
d. a[10] will out of rank
e. total = 11
f. total = 25
g. total = 12
h. total = -1

#########################################################################

R6.10 Enhanced for-loop
a. for (float v : values) { total += v;}
b. for (float v : values) { total += v;} total -= values[0];
c. int i =0;
   for (float v : values) { if (v == target) return i; i++; }

#########################################################################

R6.23 Computing runs
FUNCTION LongestRunLength(array: ARRAY of ELEMENTS) -> INTEGER:
    //If the array is empty, return 0
    IF array.Length == 0:
        RETURN 0

    //Initialize the longest run length, and the smallest possible length is 1
    longestRun = 1
    //Start by considering th first element as the beginning of a run
    currentRun = 1

    //Iterate through the array starting from the second element
    FOR i FROM 1 TO array.LENGTH-1:

        //If the current number is the same as the previous one
        IF array[i] == array[i-1]:
            //increment the current run length
            currentRun = currentRun + 1

            //If the current run length exceeds the longest run length
            IF currentRun > longestRun:
                longestRun = currentRun

        ELSE:
            //Reset the current run length to 1
            currentRun = 1

    RETURN longestRun

END FUNCTION

#########################################################################

R6.29 Multi-dimensional arrays
1. Fill all entries with 0
for (int[] subarray : values) {
  Arrays.fill(subarray, 0);
}
2. Fill elements alternately with 0s and 1s in a checkerboard pattern
for ( int i =0; i < ROWS; i++){
    for (int j =0; j < COLUMNS; j++){
        if ((i + j) % 2 == 0){
            values[i][j] = 0;
        }
        else{
            values[i][j] = 1;
        }
    }
}
3. Fill only the elements at the top and bottom row with zeros
for ( int i = 0; i < ROWS;i++){
    for (int j = 0; j < COLUMNS; j++){
        if (i == 0 || i == ROWS -1){
            values[i][j] = 0;
        }
    }
}
4. Compute the sum of all elements
int sum =0;
for (int i = 0; i< ROWS; i++){
    for (int j = 0; j < COLUMNS; j++){
        sum += values[i][j];
    }
}
5. Print the array in tabular form
for (int i =0; i < ROWS; i++){
    for (int j =0; j < COLUMNS; j++){
        System.out.print(values[i][j] + " ");
    }
    System.out.println();
}

#########################################################################

R6.34 Understanding arrays
a. True
b. True
c. False: you can create an 'ArrayList<String>' Specifically to hold String objects in ArrayList in Java.
d. True
e. False: A method in Java can definitely return an 'ArrayList'. You just need to specify the 'ArrayList' as the return
type of the method.
f. False: When you pass an 'ArrayList' to a method in Java, the method can modify the ArrayList, including changing its
size by adding or removing elements.

#########################################################################

R7.1 Exceptions
If you are trying to use the 'FileReader' or 'FileInputStream' classes to open a file for reading that doesn't exist, Java
will throw a 'FileNotFoundException'
If you are trying to use the 'FileWriter' or 'FileOutPutStream' classes to open a file for writing that doesn't exist, Java
will typically create the file for you, assuming the program has the necessary permissions and the path to the file is valid.

#########################################################################

R7.6 Throwing and catching
Throwing an exception is about signaling an error or abnormal condition.
Catching an exception is about handling or dealing with that error or condition, preventing it from causing the program to
terminate unexpectedly.

#########################################################################

R7.7 Checked versus unchecked
Checked Exception is the exception that a programmer should anticipate and provide handling for. They represent scenarios
that are outside the immediate control of the program but can be reasonably expected to occur. Checked exceptions are subclasses of
'Exception' but not of 'RuntimeException'. The Java compiler requires that methods either handle these exceptions using 'try-catch'
block or declare them using the 'throws' keyword.

Example: 'FileNotFoundException'

Unchecked Exception is the exception that typically represent defects in the program(bugs), which the program should have avoided.
It's not mandatory for the programmer to handle or declare this exception. Unchecked exceptions are subclasses of 'RuntimeException'
(which in turn is a subclass of 'Exception'). The Java compiler does not require that these exceptions be caught or declared
in a method's signature.

Example: 'ArrayIndexOutOfBoundsException'

You need to declare checked exceptions with the throws reserved word if you're not handling them within the method.
Unchecked exceptions do not need to be declared, though you can if you choose.

#########################################################################

R7.8 Exceptions philosophy in Java
'IndexOutOfBoundsException' is a subtype of 'RuntimeException'. Exceptions that derive from 'RuntimeException' are considered
unchecked exceptions in Java, and it's not necessary to declare the unchecked exceptions in Java. The reasons including that:
a. If you had to declare every possible runtime exception you code could ever encounter, method signatures would become unwieldy,
and code readability could suffer.
b. Not enforcing unchecked exceptions' declaration, Java effectively indicates that programmers should focus on fixing the root cause
of these exceptions (i.e.,the logic error) rather than merely handling the symptom.
c. mandating the declaration of unchecked exceptions would make software evolution more brittle.

#########################################################################

R7.11 What is an exception object
When an exception is caught in a 'catch' clause, the exception object contains valuable information about the exceptional event
that occurred. We could retrieve the message associated with the exception by using the 'getMessage()' method. We could produce
a printout of the chain of method  calls that led to the exception by calling 'exception.printStackTrace(). We could determine
the type of the exception using the 'getClass()' method or using 'instanceof' to check against specific exception types.

Based on the type and nature of the exception, your program might decide to take specific actions to recover from the error or handle
it gracefully. After handling the exception, you can decide whether to terminate the program, continue with the next steps, or perhaps
loop back and retry the operation that caused the exception.

#########################################################################

R7.15 Scanner exceptions. Explain why these are either checked or unchecked.
a. 'NoSuchElementException': This exception is thrown when one attempts to access an element that isn't present, which in the context
of 'Scanner' class means there's no token in the input to fetch using 'next()' or 'nextInt()';
b. 'InputMismatchException': The nextInt() method in particular can throw this exception when the next token in the input does not
match the expected integer pattern.
c. 'IllegalStateException': This is thrown if the scanner is closed and one attempts to perform an operation on it.

All these exceptions are unchecked exceptions because they are subclasses of 'RuntimeException'.




